name: Azure Pipelines

variables:
  python.version: '3.7.6'

stages:

- stage: Build
  jobs:
  - job: Build
    pool:
      vmImage: 'ubuntu-latest'
    steps:

    # Download SSH key for VM infra deploy

    - task: InstallSSHKey@0
      inputs:
        knownHostsEntry: 'ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBKKu3ifmhAlFWRewCWho8ZPyJJkKlRFI46gzGbqKPYiP7NdiBzm46AbDVIhUfCMn02DHhpMVPJ+ahVufBsbyQSk='
        sshPublicKey: '$(VMSSHPublicKey)'
        sshKeySecureFile: 'udacity_proj3_vm'

    # Deploy infra w/ Terraform

    - task: DownloadSecureFile@1
      name: tfvarsTask
      displayName: 'Download .tfvars file'
      inputs:
        secureFile: 'terraform.tfvars'
    - bash: |
        mv $(tfvarsTask.secureFilePath) ./terraform/terraform.tfvars

    - bash: |
        cd ./terraform
        terraform init
        terraform apply -auto-approve
      displayName: Terraform Init and Apply
      env:
        ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
        ARM_CLIENT_ID:       $(ARM_CLIENT_ID)
        ARM_CLIENT_SECRET:   $(ARM_CLIENT_SECRET)
        ARM_TENANT_ID:       $(ARM_TENANT_ID)
        ARM_ACCESS_KEY:      $(ARM_ACCESS_KEY) # Needed for state sync
        TF_VAR_ssh_public_key_path: "/home/vsts/work/_temp/udacity_proj3_vm.pub"

    - bash: |
        cd ./terraform
        terraform output -json | jq ".ip_address.value" | tee echo
      name: VMIPAddress
      env:
        ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
        ARM_CLIENT_ID:       $(ARM_CLIENT_ID)
        ARM_CLIENT_SECRET:   $(ARM_CLIENT_SECRET)
        ARM_TENANT_ID:       $(ARM_TENANT_ID)
        ARM_ACCESS_KEY:      $(ARM_ACCESS_KEY) # Needed for state sync

    # FakeRestAPI build

    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: './fakerestapi/'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'

    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
      displayName: 'Upload FakeRestAPI Package'
      artifact: drop-fakerestapi

    # Selenium build

    - task: ArchiveFiles@2
      displayName: 'Archive Selenium VM files'
      inputs:
        rootFolderOrFile: './automatedtesting/selenium'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-selenium.zip'

    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-selenium.zip
      displayName: 'Upload Selenium Tests'
      artifact: drop-selenium



- stage: Deploy
  jobs:

  - deployment: FakeRestAPI
    pool:
      vmImage: 'ubuntu-latest'
    environment: 'TEST'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: 'UdacityDevopsProject3-sc'
              appName: 'UdacityDevopsProject3-AppService'
              appType: webApp
              package: $(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip

  - deployment: VMDeploy
    displayName: VMDeploy
    environment:
      name: VM-UI-TESTS
      resourceType: VirtualMachine
    strategy:
      runOnce:
        deploy:
          steps:
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |
                #! /bin/bash
                sudo apt-get upgrade -y
                sudo apt-get install -y python3-pip unzip chromium-browser
                LC_ALL=C pip3 install selenium
                if [ ! -f "$HOME/bin/chromedriver" ] ; then
                    wget https://chromedriver.storage.googleapis.com/90.0.4430.24/chromedriver_linux64.zip
                    unzip chromedriver_linux64.zip
                    mv chromedrive $HOME/bin/chromedriver
                fi

          - download: current
            artifact: drop-selenium
            patterns: '**/*.zip'

          - task: Bash@3
            displayName: 'Unzip artifacts'
            inputs:
              targetType: 'inline'
              script: |
                unzip -o $(Pipeline.Workspace)/drop-selenium/$(ls $(Pipeline.Workspace)/drop-selenium/ | tail -n1) -d /home/adminuser


- stage: IntegrationTests
  jobs:
  - job: IntegrationTests
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - bash: |
        make newman
      displayName: 'Run Postman tests'
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit' # Options: JUnit, NUnit, VSTest, xUnit, cTest
        testResultsFiles: 'results/newman-output.xml'


- stage: UITests
  jobs:
  - deployment: UITests
    displayName: UITests
    environment:
      name: VM-UI-TESTS
      resourceType: VirtualMachine
    strategy:
      runOnce:
        deploy:
          steps:
          - task: Bash@3
            displayName: Run UI Tests
            inputs:
              targetType: 'inline'
              script: |
                #! /bin/bash
                export SELENIUM_HEADLESS=TRUE
                python3 /home/adminuser/login.py
                cp selenium-results.txt /home/adminuser/selenium-results.txt
                sudo cp selenium-results.txt /var/log/selenium-results.txt

- stage: LoadTests
  jobs:
  - job: LoadTests
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - bash: |
        sudo apt-get install -y jmeter
      displayName: 'Install jmeter'

    - bash: |
        jmeter -n -t automatedtesting/jmeter/Stress.jmx -l /var/log/stress-results.jtl
      displayName: 'Run stress load test'

    - bash: |
        jmeter -n -t automatedtesting/jmeter/Endurance.jmx -l /var/log/endurance-results.jtl
      displayName: 'Run endurance load test'
