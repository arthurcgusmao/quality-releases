{
	"info": {
		"_postman_id": "2983be20-fcf3-4c8c-927e-ca43d09f4ea6",
		"name": "Custom APIs",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Create",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful response\", function () {",
							"    pm.expect(pm.response.status).to.equal('OK');",
							"});",
							"pm.test(\"Valid data\", function () {",
							"    pm.expect(pm.response.json().ID).to.equal(parseInt(pm.environment.get(\"page\")));",
							"});",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var env = pm.environment.get(\"endpoint\");",
							"var id = parseInt(pm.environment.get(\"page\"));",
							"var dynamicRequestBody;",
							"",
							"if (env === \"Books\") {",
							"    dynamicRequestBody = {",
							"        \"ID\": id,",
							"        \"Title\": \"Udacity Book\",",
							"        \"Description\": \"Test book for testing\",",
							"        \"PageCount\": 99,",
							"        \"Excerpt\": \"Udacity rocks\",",
							"        \"PublishDate\": \"2021-10-03T14:36:40.0565799+00:00\"",
							"    };",
							"} else if (env === \"Authors\") {",
							"    dynamicRequestBody = {",
							"        \"ID\": id,",
							"        \"IDBook\": 2,",
							"        \"FirstName\": \"sample string 3\",",
							"        \"LastName\": \"sample string 4\"",
							"    };",
							"} else if (env === \"CoverPhotos\") {",
							"    dynamicRequestBody = {",
							"        \"ID\": id,",
							"        \"IDBook\": 1,",
							"        \"Url\": \"https://placeholdit.imgix.net/~text?txtsize=33&txt=Book 1&w=250&h=350\"",
							"    };",
							"} else if (env === \"Users\") {",
							"    dynamicRequestBody = {",
							"        \"ID\": id,",
							"        \"UserName\": \"User 99\",",
							"        \"Password\": \"PasswordX\"",
							"    };",
							"} else if (env === \"Activities\") {",
							"    dynamicRequestBody = {",
							"        \"ID\": id,",
							"        \"Title\": \"Activity X\",",
							"        \"DueDate\": \"2021-05-04T20:13:44.3149189+00:00\",",
							"        \"Completed\": false",
							"    }",
							"}",
							"",
							"pm.environment.set(\"dynamicRequestBody\", JSON.stringify(dynamicRequestBody));",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{dynamicRequestBody}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/{{endpoint}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"{{endpoint}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Read",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful response\", function () {",
							"    pm.expect(pm.response.status).to.equal('OK');",
							"});",
							"pm.test(\"Valid data\", function () {",
							"    pm.expect(pm.response.json().ID).to.equal(parseInt(pm.environment.get(\"page\")));",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/api/{{endpoint}}/{{page}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"{{endpoint}}",
						"{{page}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful response\", function () {",
							"    pm.expect(pm.response.status).to.equal('OK');",
							"});",
							"pm.test(\"Valid data\", function () {",
							"    pm.expect(pm.response.json().ID).to.equal(parseInt(pm.environment.get(\"page\")));",
							"});",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var env = pm.environment.get(\"endpoint\");",
							"var id = parseInt(pm.environment.get(\"page\"));",
							"var dynamicRequestBody;",
							"",
							"if (env === \"Books\") {",
							"    dynamicRequestBody = {",
							"        \"ID\": id,",
							"        \"Title\": \"Udacity Book\",",
							"        \"Description\": \"Test book for testing\",",
							"        \"PageCount\": 99,",
							"        \"Excerpt\": \"Udacity rocks\",",
							"        \"PublishDate\": \"2021-10-03T14:36:40.0565799+00:00\"",
							"    };",
							"} else if (env === \"Authors\") {",
							"    dynamicRequestBody = {",
							"        \"ID\": id,",
							"        \"IDBook\": 2,",
							"        \"FirstName\": \"sample string 3\",",
							"        \"LastName\": \"sample string 4\"",
							"    };",
							"} else if (env === \"CoverPhotos\") {",
							"    dynamicRequestBody = {",
							"        \"ID\": id,",
							"        \"IDBook\": 1,",
							"        \"Url\": \"https://placeholdit.imgix.net/~text?txtsize=33&txt=Book 1&w=250&h=350\"",
							"    };",
							"} else if (env === \"Users\") {",
							"    dynamicRequestBody = {",
							"        \"ID\": id,",
							"        \"UserName\": \"User 99\",",
							"        \"Password\": \"PasswordX\"",
							"    };",
							"} else if (env === \"Activities\") {",
							"    dynamicRequestBody = {",
							"        \"ID\": id,",
							"        \"Title\": \"Activity X\",",
							"        \"DueDate\": \"2021-05-04T20:13:44.3149189+00:00\",",
							"        \"Completed\": false",
							"    }",
							"}",
							"",
							"pm.environment.set(\"dynamicRequestBody\", JSON.stringify(dynamicRequestBody));",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{dynamicRequestBody}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/{{endpoint}}/{{page}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"{{endpoint}}",
						"{{page}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful response\", function () {",
							"    pm.expect(pm.response.status).to.equal('OK');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{url}}/api/{{endpoint}}/{{page}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"{{endpoint}}",
						"{{page}}"
					]
				}
			},
			"response": []
		}
	]
}